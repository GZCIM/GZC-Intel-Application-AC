# GZC Intel Application AC - Pre-built Frontend Dockerfile
# Uses locally built frontend to avoid build cache issues

FROM mcr.microsoft.com/devcontainers/python:3.11

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    nginx \
    supervisor \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies for both backends
COPY FSS_Socket/backend/requirements.txt /tmp/fss_requirements.txt
COPY Main_Gateway/backend/requirements.txt /tmp/gateway_requirements.txt
RUN pip install --no-cache-dir -r /tmp/fss_requirements.txt
RUN pip install --no-cache-dir -r /tmp/gateway_requirements.txt

# Copy PRE-BUILT frontend directly (no build step!)
COPY Main_Frontend/dist /var/www/html

# Copy backend applications
COPY FSS_Socket/backend/ /app/fss_backend/
COPY Main_Gateway/backend/ /app/gateway_backend/

# Copy clean nginx configuration with proper cache headers
COPY nginx.conf /etc/nginx/sites-enabled/default

# Copy environment variable injection script
COPY inject-env.sh /usr/local/bin/inject-env.sh
RUN chmod +x /usr/local/bin/inject-env.sh

# Create supervisor config
RUN echo '[supervisord] \n\
nodaemon=true \n\
\n\
[program:nginx] \n\
command=/usr/sbin/nginx -g "daemon off;" \n\
autostart=true \n\
autorestart=true \n\
stdout_logfile=/dev/stdout \n\
stdout_logfile_maxbytes=0 \n\
stderr_logfile=/dev/stderr \n\
stderr_logfile_maxbytes=0 \n\
\n\
[program:fss_backend] \n\
command=python /app/fss_backend/run.py \n\
directory=/app/fss_backend \n\
autostart=true \n\
autorestart=true \n\
stdout_logfile=/dev/stdout \n\
stdout_logfile_maxbytes=0 \n\
stderr_logfile=/dev/stderr \n\
stderr_logfile_maxbytes=0 \n\
environment=PYTHONUNBUFFERED="1",FLASK_PORT="5100",FLASK_HOST="0.0.0.0" \n\
\n\
[program:gateway_backend] \n\
command=python -m uvicorn app.main:app --host 0.0.0.0 --port 5000 \n\
directory=/app/gateway_backend \n\
autostart=true \n\
autorestart=true \n\
stdout_logfile=/dev/stdout \n\
stdout_logfile_maxbytes=0 \n\
stderr_logfile=/dev/stderr \n\
stderr_logfile_maxbytes=0 \n\
environment=PYTHONUNBUFFERED="1",KEY_VAULT_URL="https://gzc-finma-keyvault.vault.azure.net/",ENVIRONMENT="production"' > /etc/supervisor/conf.d/supervisord.conf

# Expose port 80 for the application
EXPOSE 80

# Start with environment injection then supervisor
CMD ["/bin/bash", "-c", "echo 'ðŸš€ Container starting...' && /usr/local/bin/inject-env.sh 2>&1 && echo 'ðŸ“‹ Starting supervisord...' && /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf"]