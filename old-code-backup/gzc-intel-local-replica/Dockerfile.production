# Multi-stage production build for GZC Intel Application
# Optimized for Azure Container Apps deployment

#===========================================
# Stage 1: Build Frontend (React/Vite)
#===========================================
FROM node:18-alpine AS frontend-builder

# Set working directory
WORKDIR /app

# Copy package files for better layer caching
COPY frontend/package*.json ./
COPY frontend/.npmrc* ./

# Install dependencies with npm ci for production builds
RUN npm ci --only=production --silent

# Copy source code
COPY frontend/ ./

# Build production frontend
RUN npm run build

# Verify build output
RUN ls -la dist/

#===========================================
# Stage 2: Build Backend Dependencies
#===========================================
FROM python:3.12-slim AS backend-deps

# Install system dependencies for PostgreSQL and compilation
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment for better dependency isolation
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements first for better layer caching
WORKDIR /app
COPY backend/requirements.txt ./

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir -r requirements.txt

#===========================================
# Stage 3: Production Runtime
#===========================================
FROM python:3.12-slim AS production

# Install minimal runtime dependencies
RUN apt-get update && apt-get install -y \
    libpq5 \
    postgresql-client \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from dependencies stage
COPY --from=backend-deps /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy backend application
WORKDIR /app/backend
COPY backend/ ./

# Copy built frontend assets
COPY --from=frontend-builder /app/dist /app/frontend/dist

# Create non-root user for security
RUN groupadd -r gzc && useradd -r -g gzc gzc
RUN chown -R gzc:gzc /app
USER gzc

# Health check endpoint
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:5100/health || exit 1

# Expose ports
EXPOSE 5100

# Environment variables for production
ENV FLASK_ENV=production
ENV FLASK_APP=app.py
ENV PYTHONPATH=/app/backend
ENV PYTHONUNBUFFERED=1

# Production startup command
CMD ["python", "-m", "gunicorn", "--bind", "0.0.0.0:5100", "--workers", "4", "--worker-class", "eventlet", "--worker-connections", "1000", "--timeout", "30", "--keep-alive", "2", "app:app"]