worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'request_id=$request_id response_time=$request_time';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 20M;
    
    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self' https:; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';" always;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=general:10m rate=30r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/m;
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    
    # Request ID for tracing
    map $http_x_request_id $request_id {
        default   $http_x_request_id;
        ""        $request_time-$msec;
    }
    
    # Internal services (with internal TLS)
    upstream frontend_service {
        least_conn;
        server frontend:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream fastapi_service {
        least_conn;
        server fastapi-backend:5000 max_fails=3 fail_timeout=30s;
        keepalive 64;
    }
    
    upstream websocket_service {
        ip_hash;
        server websocket-backend:5100 max_fails=3 fail_timeout=30s;
    }
    
    # Redirect all HTTP to HTTPS
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        
        # Allow ACME challenge for Let's Encrypt
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        # Redirect everything else to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }
    
    # Main HTTPS server - ONLY public endpoint
    server {
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;
        server_name gzc-intel-application-ac.delightfulground-653e61be.eastus.azurecontainerapps.io;
        
        # SSL certificates
        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;
        ssl_trusted_certificate /etc/nginx/certs/chain.pem;
        
        # DH parameters for perfect forward secrecy
        ssl_dhparam /etc/nginx/certs/dhparam.pem;
        
        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;
        
        # Hide server version
        server_tokens off;
        more_clear_headers Server;
        
        # Connection limits
        limit_conn addr 100;
        
        # Static Frontend (React) - encrypted
        location / {
            limit_req zone=general burst=50 nodelay;
            
            proxy_pass http://frontend_service;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Request-ID $request_id;
            
            # Ensure cookies are secure
            proxy_cookie_flags ~ secure httponly samesite=strict;
        }
        
        # API endpoints - all encrypted
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            # Require authentication header
            if ($http_authorization = "") {
                return 401 '{"error":"Authorization required"}\n';
            }
            
            # CORS for API
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' 'https://$host' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Request-ID' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Max-Age' 86400;
                return 204;
            }
            
            # Proxy to FastAPI (with encryption to backend)
            proxy_pass http://fastapi_service/api/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Authorization $http_authorization;
            
            # API security headers
            add_header X-Content-Type-Options "nosniff" always;
            add_header Cache-Control "no-store, no-cache, must-revalidate, private" always;
        }
        
        # User preferences - encrypted & authenticated
        location /api/preferences/ {
            limit_req zone=api burst=10 nodelay;
            
            # Require authentication
            if ($http_authorization = "") {
                return 401 '{"error":"Authorization required"}\n';
            }
            
            proxy_pass http://fastapi_service/api/preferences/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Authorization $http_authorization;
            
            # Sensitive data headers
            add_header Cache-Control "no-store, private" always;
            add_header X-Content-Type-Options "nosniff" always;
        }
        
        # Auth endpoints - encrypted with strict rate limiting
        location /api/auth/ {
            limit_req zone=auth burst=5 nodelay;
            
            proxy_pass http://fastapi_service/api/auth/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Request-ID $request_id;
            
            # Auth security
            add_header Cache-Control "no-store, no-cache, private" always;
            add_header X-Content-Type-Options "nosniff" always;
        }
        
        # WebSocket - encrypted (WSS)
        location ~ ^/ws_(esp|rfs|execution) {
            limit_req zone=general burst=5 nodelay;
            
            # Require authentication for WebSocket
            if ($http_authorization = "") {
                return 401 '{"error":"Authorization required for WebSocket"}\n';
            }
            
            proxy_pass http://websocket_service;
            proxy_http_version 1.1;
            
            # WebSocket upgrade
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header Authorization $http_authorization;
            
            # WebSocket timeouts
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
            proxy_buffering off;
        }
        
        # Health check (public but rate limited)
        location /health {
            access_log off;
            limit_req zone=general burst=5 nodelay;
            
            return 200 '{"status":"healthy","service":"api-gateway","timestamp":"$time_iso8601","encryption":"TLS1.3"}\n';
            add_header Content-Type application/json;
        }
        
        # Block everything else
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
    
    # Internal monitoring (localhost only)
    server {
        listen 127.0.0.1:8080;
        server_name localhost;
        
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }
    }
}